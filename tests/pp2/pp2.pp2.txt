>  Grammar
>  >  PragmaDefinition
>  >  >  token(T_PRAGMA, %pragma parser.lookahead 1024)
>  >  PragmaDefinition
>  >  >  token(T_PRAGMA, %pragma parser.root Grammar)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_PRAGMA                 %pragma\h+([\w\.]+)\h+([^\s]+))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_INCLUDE                %include\h+([^\s]+))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_TOKEN                  %token\h+(\w+)\h+([^\s]+))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_SKIP                   %skip\h+(\w+)\h+([^\s]+))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_OR                     \|)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_TOKEN_SKIPPED          ::(\w+)::)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_TOKEN_KEPT             <(\w+)>)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_TOKEN_STRING           ("[^"\\]+(\\.[^"\\]*)*"|'[^'\\]+(\\.[^'\\]*)*'))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_INVOKE                 (\w+)\(\))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_GROUP_OPEN             \()
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_GROUP_CLOSE            \))
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_ZERO_OR_ONE     \?)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_ONE_OR_MORE     \+)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_ZERO_OR_MORE    \*)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_N_TO_M          {\h*(\d+)\h*,\h*(\d+)\h*})
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_N_OR_MORE       {\h*(\d+)\h*,\h*})
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_ZERO_TO_M       {\h*,\h*(\d+)\h*})
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_REPEAT_EXACTLY_N       {\h*(\d+)\h*})
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_KEPT_NAME              #)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_NAME                   [a-zA-Z_\x7f-\xff\\][a-zA-Z0-9_\x7f-\xff\\]*)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_EQ                     ::=)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_ALIAS                  \bas\b)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_COLON                  :)
>  >  TokenDefinition
>  >  >  token(T_TOKEN, %token T_DELEGATE               \->)
>  >  TokenDefinition
>  >  >  token(T_SKIP, %skip T_WHITESPACE             (\xfe\xff|\x20|\x09|\x0a|\x0d)+)
>  >  TokenDefinition
>  >  >  token(T_SKIP, %skip T_COMMENT                //[^\n]*)
>  >  TokenDefinition
>  >  >  token(T_SKIP, %skip T_BLOCK_COMMENT          /\*.*?\*/)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Grammar)
>  >  >  Repetition
>  >  >  >  token(T_INVOKE, __definition())
>  >  >  >  Quantifier
>  >  >  >  >  token(T_REPEAT_ZERO_OR_MORE, *)
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __definition)
>  >  >  Alternation
>  >  >  >  token(T_INVOKE, TokenDefinition())
>  >  >  >  token(T_INVOKE, PragmaDefinition())
>  >  >  >  token(T_INVOKE, IncludeDefinition())
>  >  >  >  token(T_INVOKE, RuleDefinition())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, TokenDefinition)
>  >  >  Alternation
>  >  >  >  token(T_TOKEN_KEPT, <T_TOKEN>)
>  >  >  >  token(T_TOKEN_KEPT, <T_SKIP>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, PragmaDefinition)
>  >  >  token(T_TOKEN_KEPT, <T_PRAGMA>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, IncludeDefinition)
>  >  >  token(T_TOKEN_KEPT, <T_INCLUDE>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, RuleDefinition)
>  >  >  Concatenation
>  >  >  >  Repetition
>  >  >  >  >  token(T_INVOKE, ShouldKeep())
>  >  >  >  >  Quantifier
>  >  >  >  >  >  token(T_REPEAT_ZERO_OR_ONE, ?)
>  >  >  >  token(T_INVOKE, RuleName())
>  >  >  >  Repetition
>  >  >  >  >  token(T_INVOKE, Alias())
>  >  >  >  >  Quantifier
>  >  >  >  >  >  token(T_REPEAT_ZERO_OR_ONE, ?)
>  >  >  >  Repetition
>  >  >  >  >  token(T_INVOKE, RuleDelegate())
>  >  >  >  >  Quantifier
>  >  >  >  >  >  token(T_REPEAT_ZERO_OR_ONE, ?)
>  >  >  >  token(T_INVOKE, RuleProduction())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, RuleName)
>  >  >  Concatenation
>  >  >  >  token(T_TOKEN_KEPT, <T_NAME>)
>  >  >  >  token(T_INVOKE, __ruleProductionDelimiter())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Alias)
>  >  >  Concatenation
>  >  >  >  token(T_TOKEN_SKIPPED, ::T_ALIAS::)
>  >  >  >  token(T_TOKEN_KEPT, <T_NAME>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, RuleDelegate)
>  >  >  Concatenation
>  >  >  >  token(T_TOKEN_SKIPPED, ::T_DELEGATE::)
>  >  >  >  token(T_TOKEN_KEPT, <T_NAME>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, ShouldKeep)
>  >  >  token(T_TOKEN_SKIPPED, ::T_KEPT_NAME::)
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __ruleProductionDelimiter)
>  >  >  Alternation
>  >  >  >  token(T_TOKEN_SKIPPED, ::T_COLON::)
>  >  >  >  token(T_TOKEN_SKIPPED, ::T_EQ::)
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, RuleProduction)
>  >  >  token(T_INVOKE, __alternation())
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __alternation)
>  >  >  Alternation
>  >  >  >  token(T_INVOKE, __concatenation())
>  >  >  >  token(T_INVOKE, Alternation())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Alternation)
>  >  >  Concatenation
>  >  >  >  token(T_INVOKE, __concatenation())
>  >  >  >  Repetition
>  >  >  >  >  Concatenation
>  >  >  >  >  >  token(T_TOKEN_SKIPPED, ::T_OR::)
>  >  >  >  >  >  token(T_INVOKE, __concatenation())
>  >  >  >  >  Quantifier
>  >  >  >  >  >  token(T_REPEAT_ONE_OR_MORE, +)
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __concatenation)
>  >  >  Alternation
>  >  >  >  token(T_INVOKE, __repetition())
>  >  >  >  token(T_INVOKE, Concatenation())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Concatenation)
>  >  >  Concatenation
>  >  >  >  token(T_INVOKE, __repetition())
>  >  >  >  Repetition
>  >  >  >  >  token(T_INVOKE, __repetition())
>  >  >  >  >  Quantifier
>  >  >  >  >  >  token(T_REPEAT_ONE_OR_MORE, +)
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __repetition)
>  >  >  Alternation
>  >  >  >  token(T_INVOKE, __simple())
>  >  >  >  token(T_INVOKE, Repetition())
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Repetition)
>  >  >  Concatenation
>  >  >  >  token(T_INVOKE, __simple())
>  >  >  >  token(T_INVOKE, Quantifier())
>  >  RuleDefinition
>  >  >  RuleName
>  >  >  >  token(T_NAME, __simple)
>  >  >  Alternation
>  >  >  >  Concatenation
>  >  >  >  >  token(T_TOKEN_SKIPPED, ::T_GROUP_OPEN::)
>  >  >  >  >  token(T_INVOKE, __alternation())
>  >  >  >  >  token(T_TOKEN_SKIPPED, ::T_GROUP_CLOSE::)
>  >  >  >  token(T_TOKEN_KEPT, <T_TOKEN_SKIPPED>)
>  >  >  >  token(T_TOKEN_KEPT, <T_TOKEN_KEPT>)
>  >  >  >  token(T_TOKEN_KEPT, <T_INVOKE>)
>  >  RuleDefinition
>  >  >  ShouldKeep
>  >  >  RuleName
>  >  >  >  token(T_NAME, Quantifier)
>  >  >  Alternation
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_ZERO_OR_ONE>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_ONE_OR_MORE>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_ZERO_OR_MORE>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_N_TO_M>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_ZERO_OR_MORE>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_ZERO_TO_M>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_N_OR_MORE>)
>  >  >  >  token(T_TOKEN_KEPT, <T_REPEAT_EXACTLY_N>)
