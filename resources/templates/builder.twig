{% include "partials/header.twig" %}

namespace Railt\Parser\Runtime;

use Phplrt\Parser\Rule\RuleInterface;
use Phplrt\Contracts\Ast\NodeInterface;
use Phplrt\Contracts\Lexer\TokenInterface;
use Phplrt\Parser\Builder\BuilderInterface;
use Phplrt\Contracts\Source\ReadableInterface;
use Railt\Parser\Extension\ExtensionInterface;
use Railt\Parser\Extension\ExtendableInterface;
use Railt\Parser\Exception\SyntaxErrorException;

/**
 * @internal This class is generated by railt/parser, specifically by Railt\Parser\Generator\Generator
 */
final class Builder implements BuilderInterface, ExtendableInterface
{
    /**
     * @var array|\Closure[]
     */
    private array $reducers = [];

    /**
     * {@inheritDoc}
     * @throws SyntaxErrorException
     * @throws \Throwable
     */
    public function build(ReadableInterface $file, RuleInterface $rule, TokenInterface $token, $state, $children)
    {
        try {
            $result = $this->reduce($state, $children);

            if (isset($this->reducers[$state])) {
                return ($this->reducers[$state])($result, $children);
            }

            return $result;
        } catch (SyntaxErrorException $e) {
            throw $e;
        } catch (\Exception $e) {
            throw new SyntaxErrorException($e->getMessage(), $file, $token->getOffset());
        }
    }

    /**
     * {@inheritDoc}
     */
    public function extend(ExtensionInterface $extension): void
    {
        foreach ($extension->reducers() as $name => $value) {
            $this->reducers[$name] = $value;
        }
    }

    /**
     * @param int|string $state
     * @param NodeInterface|NodeInterface[]|TokenInterface|TokenInterface[] $children
     * @return NodeInterface|mixed
     * @throws \Throwable
     */
    private function reduce($state, $children)
    {
        switch ($state) {
{% for id, code in reducers %}
            case {{ value(id) | raw }}:
                return $this->reduce{{ id | raw }}($children);
{% endfor %}
        }

        return null;
    }

{% for id, code in reducers %}
    /**
     * @param NodeInterface|NodeInterface[]|TokenInterface|TokenInterface[] $children
     * @return NodeInterface|mixed
     * @throws \Throwable
     */
    protected function reduce{{ id | raw }}($children)
    {
    {{ depth(code, 1) | raw }}
    }

{% endfor %}
}

