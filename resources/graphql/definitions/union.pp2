

/**
 * --------------------------------------------------------------------------
 *  GraphQL SDL Unions
 * --------------------------------------------------------------------------
 *
 * GraphQL Unions represent an object that could be one of a list of
 * GraphQL Object types, but provides for no guaranteed fields between
 * those types. They also differ from interfaces in that Object types
 * declare what interfaces they implement, but are not aware of what unions
 * contain them.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Unions
 */

#UnionTypeDefinition -> {
    $union = new \Railt\Parser\Node\TypeSystem\Definition\UnionTypeDefinitionNode(
        $children[1]
    );

    foreach ($children as $child) {
        switch (true) {
            case $child instanceof \Railt\Parser\Node\Description:
                $union->description = $child->value;
                break;

            case $child instanceof \Railt\Parser\Node\Generic\DirectiveCollection:
                $union->directives = $child;
                break;

            case $child instanceof \Railt\Parser\Node\Generic\TypeDefinitionCollection:
                $union->types = $child;
                break;
        }
    }

    return $union;
}
  : Description()
    UnionTypeDefinitionExceptDescription()
  ;

#UnionTypeDefinitionExceptDescription
  : UnionTypeDefinitionHead()
    UnionTypeDefinitionBody()?
  ;

#UnionTypeDefinitionHead
  : ::T_UNION:: TypeName()
    Directives()?
  ;

#UnionTypeDefinitionBody
  : ::T_EQUAL:: UnionTypeDefinitionTargets()?
  ;

#UnionTypeDefinitionTargets -> {
    return new \Railt\Parser\Node\Generic\TypeDefinitionCollection($children);
}
  : ::T_OR::? NamedType() (
      ::T_OR:: NamedType()
    )*
  ;
