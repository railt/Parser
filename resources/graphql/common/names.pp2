
//
// Fully qualified name is an unambiguous name that specifies
// which object, function, or variable a call refers to without
// regard to the context of the call.
//

#TypeName -> {
    if ($children instanceof \Phplrt\Contracts\Lexer\TokenInterface) {
        return new \Railt\Parser\Node\NameNode($children->getValue());
    }

    return $children;
}
  : NameWithReserved()
  ;

//
// Any name includes reserved keywords.
//

#NameWithReserved -> {
    if ($children instanceof \Phplrt\Contracts\Lexer\TokenInterface) {
        return new \Railt\Parser\Node\NameNode($children->getValue());
    }

    return $children;
}
  : NameWithoutValues()
  | <T_TRUE>
  | <T_FALSE>
  | <T_NULL>
  ;

//
// Any name includes reserved keywords but except values: NULL, TRUE and FALSE.
//

#NameWithoutValues -> {
    if ($children instanceof \Phplrt\Contracts\Lexer\TokenInterface) {
        return new \Railt\Parser\Node\NameNode($children->getValue());
    }

    return $children;
}
  : NameWithoutReserved()
  | <T_TYPE>
  | <T_ENUM>
  | <T_UNION>
  | <T_INTERFACE>
  | <T_SCHEMA>
  | <T_SCALAR>
  | <T_DIRECTIVE>
  | <T_INPUT>
  | <T_FRAGMENT>
  | <T_EXTEND>
  | <T_EXTENDS>
  | <T_IMPLEMENTS>
  | <T_ON>
  | <T_REPEATABLE>
  | <T_QUERY>
  | <T_MUTATION>
  | <T_SUBSCRIPTION>
  ;

//
// Any name without reserved keywords.
//

#NameWithoutReserved -> {
    return new \Railt\Parser\Node\NameNode($children->getValue());
}
  : <T_NAME>
  ;
